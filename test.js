const assert = require("assert");
const readline = require("readline");

const seedrandom = require("seedrandom");
const shelling = require("./shelling-3.js");

var params = {
  runXtimes: 1,
  cityHeight: 10,
  cityWidth: 10,
  occupancy: 0.9,
  populationProportions: [0, 0.6, 0.4],
  segmentRatio: 0.5
};

function testRun0(params) {
  params.seed = "hello";
  Math.random = seedrandom(params.seed);

  var cityMat = Array(params.cityHeight)
    .fill()
    .map(() => Array(params.cityWidth).fill(0));

  shelling.populate(cityMat, params);

  shelling.printMat(cityMat, params);

  var [howLong, segmentedCount] = shelling.runShelling(cityMat, params);

  shelling.printMat(cityMat, params);
  shelling.printList(params);
}

function testRun1(params) {
  params.seed = "hello";
  Math.random = seedrandom(params.seed);
  var z = [
    [0, 0, 1, 0, 1, 0, 0],
    [1, 1, 2, 0, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 2, 0],
    [0, 1, 1, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 2]
  ];
  shelling.printMat(z, params);
  shelling.runShelling(z, params);
  shelling.printMat(z, params);
  shelling.printList(params);
}

function testRun2(params) {
  params.seed = "jh2df23dd23i";
  Math.random = seedrandom(params.seed);
  var histogram = shelling.runXtimes(params);
  shelling.printSparseMat(histogram);
}

function testRun3(params) {
  z = [
    [1, 2, 0, 0, 1, 0, 1],
    [0, 0, 0, 0, 1, 0, 0],
    [1, 1, 1, 0, 0, 1, 0],
    [0, 0, 1, 0, 2, 0, 0],
    [2, 1, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 0, 0, 0]
  ];

  var i = 2,
    j = 0;

  return z[i][j] + ":" + shelling.unconfortable(z, i, j, z[i][j], params);
}

function testRun4(params) {
  var z = [
    [2, 0, 2, 0, 0, 0, 1],
    [0, 0, 1, 1, 1, 0, 0],
    [1, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 1],
    [1, 1, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 1, 0],
    [1, 0, 2, 0, 1, 0, 0]
  ];
  var b = [
    [2, 0, 2, 0, 0, 0, 1],
    [0, 0, 1, 1, 1, 0, 0],
    [1, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 1],
    [1, 1, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 1, 0],
    [1, 0, 2, 0, 1, 0, 0]
  ];
}

it("Test 3 Runs Well", () => {
  assert.equal(testRun3(params), "1:false");
});

// Use readline to create command line interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function testRun5(params, params2) {
  params.seed = "sfefe";
  Math.random = seedrandom(params.seed);
  params.occupancy = 1;
  params.populationProportions[1] = 0.1;
  params.populationProportions[2] = 0.9;

  params.cityWidth = params.cityHeight = 30;
  params2.cityWidth = params2.cityHeight = 10;

  var z = Array(params.cityHeight)
    .fill()
    .map(() => Array(params.cityWidth).fill(0));
  var b = Array(params2.cityHeight)
    .fill()
    .map(() => Array(params2.cityWidth).fill(0));

  shelling.populate(z, params);

  shelling.shuffle2(z, params, b, params2);

  var z_expected = [
    [
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      1,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      1
    ],
    [
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      1,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      0,
      2,
      2,
      2
    ],
    [
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      1,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2
    ],
    [
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      1,
      0,
      2,
      2,
      1,
      2,
      1,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ],
    [
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2
    ]
  ];
  var b_expected = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
  ];
  it("Test 5: z is same", () => {
    assert.equal(z, z_expected);
  });
  it("Test 5: b is same", () => {
    assert.equal(b, b_expected);
  });
}

testRun2(params);

var params = {
  runXtimes: 1,
  cityHeight: 30,
  cityWidth: 30,
  occupancy: 0.9,
  populationProportions: [0, 0.6, 0.4],
  segmentRatio: 0.5,
  seed: "hello"
};
var params2 = {};

Object.assign(params2, params);
Object.assign(params2, { cityHeight: 10, cityWidth: 10 });

testRun5(params, params2);
